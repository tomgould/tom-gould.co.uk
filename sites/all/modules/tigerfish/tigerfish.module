<?php
/**
 * @file
 * Main module file for the tigerfish utility module.
 */

/**
 * Implements hook_field_formatter_info().
 */
function tigerfish_field_formatter_info() {
  return array(
    'text_plain_trimmed' => array(
      'label' => t('Plain text (trimmed)'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array('trim_length' => 300),
    ),
    'image_gallery' => array(
      'label' => t('Image with gallery options'),
      'field types' => array('image'),
      'settings' => array(
        'image_style'   => '',
        'image_link'    => '',
        'image_caption' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tigerfish_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $type = $instance['display'][$view_mode]['type'];

  switch ($type) {
    case 'text_plain_trimmed':
      $element = text_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;
    case 'image_gallery':
      $display = $instance['display'][$view_mode];
      $settings = $display['settings'];

      $image_styles = image_style_options(FALSE);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );

      $link_types = array(
        'content'  => t('Content'),
        'file'     => t('File'),
        'lightbox' => t('Lightbox'),
      );
      $element['image_link'] = array(
        '#title' => t('Link image to'),
        '#type' => 'select',
        '#default_value' => $settings['image_link'],
        '#empty_option' => t('Nothing'),
        '#options' => $link_types,
      );

      $caption_types = array(
        'above' => t('Above'),
        'below' => t('Below'),
      );
      $element['image_caption'] = array(
        '#title' => t('Image caption'),
        '#type' => 'select',
        '#default_value' => $settings['image_caption'],
        '#empty_option' => t('None'),
        '#options' => $caption_types,
      );
      break;
  }

  return isset($element) ? $element : FALSE;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tigerfish_field_formatter_settings_summary($field, $instance, $view_mode) {
  $type = $instance['display'][$view_mode]['type'];

  switch ($type) {
    case 'text_plain_trimmed':
      $summary = text_field_formatter_settings_summary($field, $instance, $view_mode);
      break;
    case 'image_gallery':
      $display = $instance['display'][$view_mode];
      $settings = $display['settings'];

      $summary = array();

      $image_styles = image_style_options(FALSE);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (!empty($settings['image_style']) && !empty($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }

      $link_types = array(
        'content'  => t('Linked to content'),
        'file'     => t('Linked to file'),
        'lightbox' => t('Linked to lightbox'),
      );
      // Display this setting only if image is linked.
      if (!empty($settings['image_link']) && !empty($link_types[$settings['image_link']])) {
        $summary[] = $link_types[$settings['image_link']];
      }


      if (!empty($settings['image_caption'])) {
        $summary[] = t('Image caption: @style', array('@style' => $settings['image_caption']));
      }
      else {
        $summary[] = t('No caption');
      }
      $summary = implode('<br />', $summary);
      break;
  }

  return isset($summary) ? $summary : FALSE;;
}

/**
 * Implements hook_field_formatter_view().
 */
function tigerfish_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'text_plain_trimmed':
      foreach ($items as $delta => $item) {
        $output = _text_sanitize($instance, $langcode, $item, 'value');
        $output = strip_tags($output);
        if ($display['type'] == 'text_plain_trimmed') {
          $output = text_summary($output, $instance['settings']['text_processing'] ?
            $item['format'] :
            NULL, $display['settings']['trim_length']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
    case 'image_gallery':
      $element = array();

      // Check if the formatter involves a link.
      if ($display['settings']['image_link'] == 'content') {
        $uri = entity_uri($entity_type, $entity);
      }
      elseif ($display['settings']['image_link'] == 'file') {
        $link_file = TRUE;
        $options = array();
      }
      elseif ($display['settings']['image_link'] == 'lightbox') {
        $link_file = TRUE;
        $options = array('attributes' => array('rel' => 'shadowbox'));
      }

      foreach ($items as $delta => $item) {
        if (!empty($link_file)) {
          $uri = array(
            'path' => file_create_url($item['uri']),
            'options' => $options,
          );
        }
        $element[$delta] = array(
          '#theme' => 'tigerfish_field_image_formatter',
          '#item' => $item,
          '#image_style' => $display['settings']['image_style'],
          '#image_caption' => $display['settings']['image_caption'],
          '#path' => !empty($uri) ? $uri : '',
        );
      }
      break;
  }
  return $element;
}


/**
 * Implements hook_theme().
 */
function tigerfish_theme() {
  return array(
    'tigerfish_field_image_formatter' => array(
      'variables' => array(
        'item'          => NULL,
        'path'          => NULL,
        'image_style'   => NULL,
        'image_caption' => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for an image caption field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - path: An array containing the link 'path' and link 'options'.
 *   - image_style: An optional image style.
 *   - image_caption: The caption settings.
 *
 */
function theme_tigerfish_field_image_formatter($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );

  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }

  if ($variables['path']) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  if (isset($image['title']) && !empty($variables['image_caption'])) {
    $output = tigerfish_caption($output, $image['title'], $variables['image_caption']);
  }
  return $output;
}

/**
 * Custom caption function to add an image caption to the image
 *
 * @param string $image
 * @param string $title
 * @param string $option
 *
 * @return string
 */
function tigerfish_caption($image, $title, $option) {

  $attributes = array(
    'class' => array('image-caption', 'clearfix'),
  );
  if ($option == 'above') {
    $attributes['class'][] = 'caption-above';
    return '<div ' . drupal_attributes($attributes) . '>' . $title . '</div>' . $image;
  }
  elseif ($option == 'below') {
    $attributes['class'][] = 'caption-below';
    return $image . '<div ' . drupal_attributes($attributes) . '>' . $title . '</div>';
  }
  else {
    return $image;
  }
}



