<?php

/**
 * @file
 * empty
 *
 */

/**
 * Implementation of hook_menu().
 */
function crosslink_menu() {
  $items['admin/content/crosslinks'] = array(
    'title'            => 'Crosslinks',
    'description'      => 'Cross Link content based on a vocabulary',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('crosslink_admin_settings'),
    'access arguments' => array('administer crosslink'),
  );

  // Add tags to pages
  $items['admin/content/crosslinks/tagall'] = array(
    'title'            => t('Tagging All Pages'),
    'page callback'    => 'crosslink_tag_all_pages',
    'access arguments' => array('administer crosslink'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_nodeapi()
 */
function crosslink_node_view(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $a = 1;
  if ($op == 'update') {
    crosslink_tag_all_pages($node->nid);
  }

  if ($op == 'view' && $a4 === TRUE) {
    // get the Vocabulary ID for the Tags Directory
    $tags_vid = db_query(
      "SELECT vid FROM {taxonomy_vocabulary} WHERE name = '%s'", 'Tags'
      )->fetchField();

    // parse the result in to an array
    $tags_types   = array();
    $tags_types[] = 'about_us';
    $tags_types[] = 'blog';
    $tags_types[] = 'page';
    $tags_types[] = 'news';
    $tags_types[] = 'service';

    // make new variable to work on
    $linked_body = $node->body;

    /*
     * This is the clever bit that removes the HTML tags and replaces
     * them with IDs so that we dont link text in alt tags or within
     * code blocks
     *
     * We will then loop back through the IDs and replace them with their
     * corresponding html tags after the linking has been done.
     *
     */

    // declare arrays & variables
    $ary_body       = explode('<', $linked_body);
    $ary_tags       = array();
    $no_tags_string = '';

    // array of identifiers where we want to do something different
    // than the usual 1 tag = 1 ID processing
    $exceptions = array('href', 'geshifilter');

    // loop itteration (amount of tags)
    $c = count($ary_body);

    for ($i = 0; $i < $c; $i++) {

      // the line from the array
      $line = $ary_body[$i];

      // call function to return elems of line
      $elems     = crosslink_return_elems($line);
      $tag       = $elems['tag'];
      $remainder = $elems['remainder'];


      // What to do if an Anchor tag is found
      if (strpos(
          $tag, 'href') !== FALSE
      ) {

        // empty variable to hold entire anchor block
        $whole_anchor  = '';
        // need this for test later (will be apparent)
        $must_subtract = FALSE;

        do {
          // the line from the array
          $line = $ary_body[$i];

          // call function to return elems of line
          $elems     = crosslink_return_elems($line);
          $tag       = $elems['tag'];
          $remainder = $elems['remainder'];

          // whole anchor .= tag + remainder until </a> is found
          $whole_anchor .= $tag . $remainder;

          // itterate forward one itteration
          $i = $i + 1;

          // itteration bug fix
          $must_subtract = TRUE;
        } while (
        strpos(strtolower($whole_anchor), '</a>') === FALSE
        );

        // remove trailing remainder from whole_anchor
        $whole_anchor = mb_substr(
          $whole_anchor, 0, (mb_strlen($whole_anchor) - mb_strlen($remainder))
        );

        // subtract the last itteration + if set to do so coz outer
        // loop will do this for us next time round
        if ($must_subtract == TRUE) {
          $i = $i - 1;
        }

        // build new string with no tags in it, just replacment IDs
        $no_tags_string .= '((##' . $i . '##))' . $remainder;
        // Save the TAG with the correct ID to reference the Tag ID
        $ary_tags[$i] = $whole_anchor;
      }
      else {
        // the line from the array
        $line = $ary_body[$i];

        // call function to return elems of line
        $elems     = crosslink_return_elems($line);
        $tag       = $elems['tag'];
        $remainder = $elems['remainder'];


        // build new string with no tags in it, just replacment IDs
        $no_tags_string .= '((##' . $i . '##))' . $remainder;
        // Save the TAG with the correct ID to reference the Tag ID
        $ary_tags[$i] = $tag;
      }
    }


    /*
     * for each term of the correct type do the replaces on the processed
     * text with NO HTML in it
     *
     */

    $a = 0;

    $link_vars = array(
      'no_tags_string' => $no_tags_string,
      'ary_tags'       => $ary_tags,
      'i'              => $i,
    );


    if (in_array($node->type, $tags_types)) {
      foreach ($node->taxonomy as $tax) {
        if ($tax->vid == $tags_vid) {
          // Link the specific terms
          $link_vars = crosslink_link_terms($link_vars, $tax->name, $tax->tid);
        }
      }
    }

    $ary_tags       = $link_vars['ary_tags'];
    $no_tags_string = $link_vars['no_tags_string'];

    /*
     * Loop back through the HTML IDs and replace them with the HTML elements
     *
     */
    foreach ($ary_tags as $key => $value) {
      $no_tags_string = str_replace(
        '((##' . $key . '##))', $value, $no_tags_string
      );
    }



    // Alter the node body to contain the linked version
    $node->content['body'][0]['#value'] = $no_tags_string;
  }
}

/*
 * @TODO REWRITE THIS FOR RECURSIVE PASSING OF THE TAGS ARRAY ETC
 *
 * Glossary Type Linker Function
 *
 * Returns the origional input with the first occurance of the term linked
 * to the term taxonomy/term page
 *
 */

function crosslink_link_terms($link_vars, $name, $tid) {

  //
  $full_str    = $link_vars['no_tags_string'];
  $search_term = " " . $name . " ";
  $ary_tags    = $link_vars['ary_tags'];
  $i           = $link_vars['i'];

  if ($search_term !== FALSE) {

    //  commented out so words only matched in a case sensetive way
    //  $lower_full_str = strtolower($full_str);
    //  $lower_search_term = strtolower($search_term);

    $lower_full_str    = $full_str;
    $lower_search_term = $search_term;

    if (strpos($lower_full_str, $lower_search_term) !== FALSE) {
      $start_pos = strpos($lower_full_str, $lower_search_term);
      if ($start_pos === FALSE) {
        $start_pos = 0;
      }

      $search_term_length = strlen($search_term);
      $full_str_length    = strlen($full_str);

      $str_01 = substr($full_str, 0, $start_pos);
      $str_02 = substr($full_str, $start_pos, $search_term_length);

      if ($full_str_length - $start_pos - $search_term_length > 0) {
        $str_03 = substr($full_str, ($full_str_length - $start_pos - $search_term_length) * -1);
      }
      else {
        $str_03 = '';
      }

      // here we have a match so build the link, add it to the tags array
      // replace the word with a ((##ID and increment the tags counter
      $the_link = l(
        '<strong class="normal">' . trim($str_02) . '</strong>', 'taxonomy/term/' . $tid, array('html' => TRUE, 'attributes' => array('class' => 'cltag', 'title' => $str_02))
      );

      // add the link to the return array
      $link_vars['ary_tags'][$i] = $the_link;

      // return the altered no tags string
      $link_vars['no_tags_string'] = $str_01 . ' ((##' . $i . '##)) ' . $str_03;
      ;

      // increment the tags count
      $link_vars['i'] ++;
    }
  }
  return $link_vars;
}

/*
 * Automaticly Tags all pages with the terms from the Tags Vocabulary
 *
 * This function searches for nodes with corresponding content types to
 * the Tags vocabulary and then tags the nodes appropriatly if the body
 * text contains any of the terms from that vocabulary
 *
 */

function crosslink_tag_all_pages($nid = FALSE) {

  // set no time limit for this
  set_time_limit(0);
  ini_set('memory_limit', -1);
  ini_set('session.gc_maxlifetime', 30);


  // get the Vocabulary ID for the Tags Directory
  $vid = db_result(
    db_query(
      "SELECT vid FROM {vocabulary} WHERE name = '%s'", 'Tags'
    )
  );

  // get the Terms and terms IDs form the terms table where vocab ID = TAGS etc
  $tag_terms = db_query(
    "SELECT tid, name FROM {term_data} WHERE vid = %d ORDER BY length(name) ASC", $vid
  );
  // Save the terms in to an array
  while ($tag       = db_fetch_array($tag_terms)) {
    $tags[] = $tag;
  }


  // Get array of current content types active for the Tags Vocabulary
  $vovabulary_meta      = taxonomy_vocabulary_load($vid);
  $content_types_to_tag = $vovabulary_meta->nodes;

  // build content type SQL
  $content_type_sql = implode($content_types_to_tag, "' OR n.type = '");
  $content_type_sql = " n.type = '" . $content_type_sql . "' ";


  // if a Node ID was submitted then use it here because we are tagging
  // only one node from nodeapi op 'save'
  if ($nid !== FALSE) {
    $nid_sql = 'AND n.nid = ' . $nid . ' ';
  }
  else {
    $nid_sql = '';
  }

  // Get node IDs for the relevant Nodes
  $result = db_query('SELECT n.nid FROM {node} n WHERE ' . $content_type_sql . ' ' . $nid_sql . ' AND n.status = 1');

  // Zero value node counter for return
  $node_count = 0;


  $escaped_terms = array();

  // for each node
  while ($node = db_fetch_object($result)) {
    //node counter for return
    $node_count++;

    // get node ID
    $obj_node = node_load($node->nid);

    // Make an array to hold the existing taxonomy terms
    $this_tags = $obj_node->taxonomy;

    // for each tag
    foreach ($tags as $tag) {
      // get tag ID and Name
      $this_tid = $tag['tid'];
      $this_tag = $tag['name'];

      if (!isset($escaped_terms[$this_tag])) {
        $escaped_terms[$this_tag] = preg_quote($this_tag, '/');
      }

      // test for occurance of tag in node body
      if (mb_strpos($obj_node->body, " " . $escaped_terms[$this_tag] . " ") !== FALSE) {
        // Add relevent relevant term objects to the tags array
        $this_tags[$this_tid] = taxonomy_get_term($this_tid);
      }
    }

    // Save the Tags associated with this node to the node using
    taxonomy_node_save($obj_node, $this_tags);
  }

// output written to page on completion of the task
  return 'Crosslinking effected ' . $node_count . ' total nodes';
}

/**
 * Implementation of hook_perm().
 */
function crosslink_permission() {
  $permissions['administer crosslink'] = array(
    'title' => t('Administer the Cross Links module'),
  );
  return $permissions;
}

/**
 * Form builder for administrative settings.
 */
function crosslink_admin_settings() {

  // get the Vocabulary ID for the Tags Directory
  $vid = db_result(
    db_query(
      "SELECT vid FROM {vocabulary} WHERE name = '%s'", 'Tags'
    )
  );


  // Get array of current content types active for the Tags Vocabulary
  $vovabulary_meta = taxonomy_vocabulary_load($vid);

  $content_types_to_tag = $vovabulary_meta->nodes;


  // Check that at least one content type is active for the vocabulary
  if (count($content_types_to_tag) == 0) {
    $content_types_to_tag = array('No Content types are active for the tags
      Vocabulary, go to the Taxonomy page and edit the Tags vocabulary.');
  }


  // define fieldset for admin area
  $form['crosslinks'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Crosslinks'),
    '#description' => t('Settings for using Crosslink.')
  );

  // Write out the list of currently active nodes
  $form['crosslinks']['current_terms'] = array(
    '#item'  => 'textfield',
    //'#title' => t('Run bulk update'),
    '#value' => theme_item_list($content_types_to_tag, "Currently Crosslinking the following Content types. <br />
       To edit the content types go to the Taxonomy page and
       edit the Tags vocabulary.", 'ul')
  );


  // build admin links array
  $admin_links = array(
    '<p>' . l('Retag all pages within the content types above with the
    relevant vocabulary terms, Click Here!', 'admin/content/crosslinks/tagall') . '</p>'
  );

  // write out admin links array
  $form['crosslinks']['admin_links'] = array(
    '#item'  => 'textfield',
    //'#title' => t('Run bulk update'),
    '#value' => theme_item_list($admin_links, "Admin Links", 'ul')
  );



  return system_settings_form($form);
}

/*
 * returns tag and remainder of string for crosslink_nodeapi function
 *
 */

function crosslink_return_elems($str) {
  $tag       = '';
  $remainder = '';
  // the HTML tag at the left of the line
  $tag       = (mb_substr($str, 0, mb_strpos($str, '>')));
  if (mb_strlen($tag) > 0) {
    $tag = '<' . $tag . '>';
  }
  // the remainder of the line, after the HTML tag
  if ((mb_strlen($str) - mb_strpos($str, '>') - 1 ) > 0) {
    $remainder = (
      mb_substr($str, (mb_strlen($str) - mb_strpos($str, '>') - 1) * -1)
      );
  }


  $return              = array();
  $return['tag']       = $tag;
  $return['remainder'] = $remainder;

  return $return;
}
